import {
  StringMap,
  Layout,
  MenuItem,
  Module,
  Page,
  ServiceResponse,
  ServiceSpec,
  Sql,
  PageTemplate,
  ValueSchema,
  PageAlteration,
  Form,
  ListSource,
  FunctionType,
} from '../..';

/**
 *   attributes/components that are used as-they-are at run time
 */
type AppCommonOnes = {
  name: string;
  version: string;
  date: string;

  description: string;
  /**
   *  app-specific configuration parameters that may used by app-specific functions
   */
  appParams?: { [key: string]: any };

  /**
   * default max length to be used for a text-value-schema with no max specified
   */
  maxLengthForTextField: number;
  /**
   * simplity agent manages login process, if it is configured at the app level.
   * this service, if specified, has to conform to the login-specific API
   */
  loginServiceName?: string;
  /**
   * simplity agent invokes the logout service, but does not expect any response back.
   */
  logoutServiceName?: string;
  /**
   * URL for the server. All requests are sent to this url.
   * Only local resources are used if the url is not set
   */
  serverUrl?: string;
  /**
   * e.g. ./assets/images/
   */
  imageBasePath: string;

  /**
   * layout to render on load
   */
  startingLayout: string;

  /**
   * module to be selected by default on loading
   */
  startingModule: string;

  /**
   * ready responses are cached responses by serviceNames,  by the client.
   * we may also decide to shift them to the server side on a need basis.
   * this feature is useful during development and for demo purposes
   * if a ready response is available, the response is used instead of calling a service
   */
  cachedResponses?: StringMap<ServiceResponse>;

  /**
   * page layouts. The way the page as the user views is laid out from its components
   */
  layouts?: StringMap<Layout>;

  /**
   * how the visual components are laid out on the canvas
   */
  menuItems?: StringMap<MenuItem>;

  /**
   * run-time messages
   */
  messages?: StringMap<string>;

  /**
   * modules of the app. It's a logical grouping of pages
   */
  modules?: StringMap<Module>;
  /**
   * validation schemas
   */
  valueSchemas?: StringMap<ValueSchema>;

  /**
   * all the html source/text for the view components
   */
  htmls?: StringMap<string>;
};

/**
 * Meta data that the app-designer creates.
 * Some are used to generate other artifacts.
 * Some are used as they are in the run-time system.
 */
export type AppMetaData = AppCommonOnes & {
  /**
   * how to get list of name-value pairs for drop-down boxes?
   * run-time list sources are used to generate run-time components
   * design-time list sources are converted as "valueLists"
   */
  listSources?: StringMap<ListSource>;

  /**
   * pages that are hand-coded by the app-designer, without using any template
   */
  pages?: StringMap<Page>;
  /**
   * page templates are short-cuts to generate a standard (predefined-format) page.
   */
  templates?: StringMap<PageTemplate>;
  /**
   * small alteration to a designed or generated page.
   */
  pageAlterations?: StringMap<PageAlteration>;

  ///////////////// components that are used to generate run-time artifacts or other
  /**
   * sqls are server-side components to interface with the database
   */
  sqls?: StringMap<Sql>;

  /**
   * if this app is an multi-tenant app.
   */
  tenantFieldName?: string;
  /**
   * column name in db tables for the tenant column
   */
  tenantNameInDb?: string;
  /**
   * server-side. Used for generating java classes
   */
  javaRootPackageName?: string;

  /**
   * all functions defined for this app. Note that the function name has to be unique across all pages.
   * an App may follow naming convention like pageName.functionName if the app is quite large
   */
  functions?: StringMap<FunctionType>;

  /**
   * API (input-output) specification for all the services that are exposed by the server-app for the client-app
   */
  serviceSpecs?: StringMap<ServiceSpec>;
};
export type AppDesign = AppMetaData & {
  /**
  /**
   * forms that are generated from records
   */
  forms?: StringMap<Form>;

  ///////////// templating technique to generate stereo-type design components
};
